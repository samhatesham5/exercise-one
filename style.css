/*Fixing the browser rules*/
/*Affects every single element in the website */ 
* {
    box-sizing: border-box;
}

/*Setting it so that the margin = 0 for these elements */ 
body, 
h1, 
h2, 
h3,
h4, 
p {
    font-family: sans-serif; 
    margin: 0;
}

/* Get most general rules at the top and most specific towards the bottom (rule of thumb for later)*/
/*Make it as close to perfection as possible (use the right shade of blue and stuff)*/ 

header {
    background-color: #85C4FF; 
    padding: 40px; 

}
/* Targets all nav elements inside any header element (in our case, there's only one) */
/*Really think about if you're styling one particular nav or if the rules apply for all*/ 

header nav {
    align-items: center;
    display: flex;
    justify-content: flex-end;
    margin: 0 auto;
    max-width: 1260px;
    width: 100%; 
}

/*Styling the links*/

header nav a {
    color:black; 
    font-weight: bold;
    text-decoration: none;
    /*It's 40 px of space between so 20 on left and right*/ 
    margin: 0 15px; 
    padding: 5px;
}

a:visited {
    color: black; 
}

/* We don't want any extra space on the left or right so it's aligned with the line */
/* 

-This way, the t in Javascript doesn't have extra space on the right 
-This all becomes super helpful with making headers that have visual consistency
(i.e logos, don't want it to shift weird because of the margins)

*/ 
header nav a:last-of-type {
    margin-right: 0;
}

header nav a:first-of-type {
    margin-left: 0;
}
/*Any section element with this class, will have this applied*/
section.section-element{
    margin: 0; 
    padding: 40px;
}

/*Any section with box-model-section as a class*/ 
section.box-model-section{
    background-color: #CFF1CA;
}

/* Styling the interior now 

Margin and padding is calculated in a box (top, right, bottom, left) 

So if you wrote margin like...

margin: 0 auto 0 auto; -- Means 0 applies to the top, auto to the right, 0 to the bottom, auto to the left 

Kinda like you're going clockwise

What auto does is back fills all the margin in that space, which is good for layout 

Works best with max-width and means that it'll remain in a spot regardless of the width of screen
 In short, auto on left and right will be responsive, expanding to at most 1200px (default screen)
 
 And 10px on top and bottom means that when you shrink or expand it, it will remain 10px
*/ 

.interior {
    margin: 0 auto;
    max-width: 1200px;
    padding: 40px;
    width: 100%;
}

/* Try to alphabetize code */ 

.interior h1 {
    color: black;
    font-size: 64px;
    font-weight: 700; 
    line-height: 1.5;
    margin-bottom: 45px;
}

.interior h2 {
    color: black;
    font-size: 40px;
    font-weight: 400; 
    line-height: 1;
}

.interior p {
    color: black;
    font-size: 32px;
    font-weight: 700; 
    line-height: 1;
}

/*Styling the inside of the border box*/ 
.box-model-interior {
    background-color: #9EF490;
    border: 10px solid; 
    border-color: #187908;
    
    
}

/*Section Heading Starts */

section.heading-section-section {
    background-color: #F1CAF0;
    
}

/*Adjusting the heading for everything but not h1*/

.heading-sec h1, .heading-sec h2, .heading-sec h3, .heading-sec p, .heading-sec h4 {
    color: #6C0468;
    font-weight: 700; 
    padding: 0px 0px 40px 0px; 
} 

.heading-sec h1 {
    color: #6C0468;
    font-weight: 700; 
}


.heading-sec h3 {
    font-size: 64px;
}

.heading-sec h4 {
    font-size: 32px;
    font-weight: 700px;
    line-height: 41.4px;
}

.heading-sec p {
    font-size: 20px; 
    line-height: 23px;
}

/* -- Working on the Flex-Box Section -- */
.flex-box-section {
    background-color: #F1D3CA;

}

/* Space-between v. space-around 
    Space-around = Fill in all the space around (pushes in)
    space-between = Fill out space between (spaces content out a bit)

*/
.interior-flex {
    display: flex; 
    flex-wrap: wrap; 
    justify-content: space-between;
    padding: 0; 

}
/*Styling every single interior-flex div */ 

.interior-flex > div {
    border: 10px solid #7D260B;
    background-color: #FF9371;
}

/* Flex basis - this is how large I want it to be 

    margin-bottom gives us 42 px of space between the darker brown border and 
    the next two divs

    padding with 32 gives us space inside to see the background color


*/ 
.interior-flex--top{
    flex-basis: 100%;
    margin-bottom: 42px;
    padding: 32px;
    text-align: center;
    
}

/* Setting the max width and having the whole div fill it out 
    You can use justify-content to center anything horozontially
    You can use align-iems to center anything up and down

*/ 

.interior-flex--top > div {
    align-items: center;
    background-color: #FFECE5;
    border: 5px solid #DD4414;
    display: flex;
    height: 170px;  
    justify-content: center;
    margin: 0 auto;  
    max-width: 825px;
    width: 100%; 
}

/* Fixing this specific h1 (so that we can control the margin of this one) 

*/ 
.interior-flex--top > div > h1 {
    margin: 0;   
}

/* Setting up the other boxes */ 

.interior-flex--horizontal, .interior-flex--vertical {
    display: flex; 
    flex-basis: 48%;
    height: 324px; 
    padding: 20px;
}

.interior-flex--horizontal > div, 
.interior-flex--vertical > div {
    background-color: #FFECE5;
    border: 5px solid #DD4414;
    flex-basis: 33%;
}

/* Each div has space to the right of them */
.interior-flex--horizontal > div {
    margin-right: 10px;
}
.interior-flex--vertical > div {
    margin-bottom: 10px;
}

/* Styling vertical so that it's laying down 
    Margin left allows us to move it down bc flex-wrap is on the div

*/ 
.interior-flex--vertical {
    flex-direction: column;
}

/* Pseudo selector 
    How do we apply a rule that affects just the last of that div without naming
    a whole class

    div:last-of-type {}

*/ 

.interior-flex--horizontal > div:last-of-type, 
.interior-flex--vertical > div:last-of-type {
    margin-bottom: 0px;
}

/* -- Positioning Section -- */ 

.positioning-section {
    background-color: #CAD7F1;

}

/* Making overflow hidden allows it so 
    that the shapes stay inside the container and just hides whatevers left
*/

.positioning-section .interior {
    background-color: #85C4FF;
    border: 10px solid #0E3F9E;
    height: 600px;
    position: relative;
    overflow: hidden;
}

.circle, .sqaure {
    background-color: #4480F4;
    border: 10px solid #0E3F9E;;
    height: 200px;
    position: absolute;
    width: 200px;

}
.circle {
    border-radius: 50%;
}

/*Any circle with the .circle class will have circle-one */ 
.circle.circle-one {
    bottom: 48px;
    left: 48px; 
}

/* z -index allows you to go above elements 
    If a web site is a 2D plane, z would allow us to go 3D 
    and there's a bunch of levels above that starting with 0
        - Only works if you element is relative though
        - All elements are positioned static until otherwise said 

*/

.positioning-section h1 {
    position: relative;
    z-index: 1;
}

/*--JavaScript--*/ 
.simple-javascript-section {
    background-color: #FAEFD3;
}

.simple-javascript-section .interior h1 {
    color: #644904;
}

.counter-button-wrapper {
    align-items: center;
    display: flex;
}

.counter-button-wrapper p {
    color: #504D46; 
    font-size: 64px;
    font-weight: 700;
    line-height: 74px;
    margin: 0 40px 0 0;
}

/*---Footer---*/

footer {
    background-color: #FFC3C3;
}

.inside-footer {
    align-items: center;
    display: flex;
    font-weight: 700;
    height: 108px;
    margin: 0 auto; 
    max-width: 1280px;
    padding-left: 40px;
    width: 100%; 
}
